.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::IPv6Address 3"
.TH Net::IPv6Address 3 "2008-02-19" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Net::IPv6Address \- Perl extension that provides a variety of use IPv6 address functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::IPv6Address;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::IPv6Address provide a number of routines that allow for the manipulation and presentation of IPv6 addresses.
.PP
\&\fInew()\fR
Create a new Net::IPv6Address object.
.PP
my \f(CW$IPv6Address\fR = new \fINet::IPv6Address()\fR;
.PP
new(\s-1STRING1\s0, \s-1INTEGER\s0)
Create a new Net::IPv6Address object.
.PP
my \f(CW$IPv6Address\fR = new Net::IPv6Address(\*(L"2001:0db8:abcd::1\*(R", 64);
.PP
\&\s-1STRING1\s0 is an IPv6 address, \s-1INTEGER\s0 is the length of the prefix
.PP
loadDebug(Debug.pm)
Accepts a Debug.pm object to facilitate initialization of the debugging
.PP
use Debug;
use Net:IPv6Address;
.PP
my \f(CW$debug\fR = new Debug;
my \f(CW$IPv6Address\fR = new \fINet::IPv6Address()\fR;
\&\f(CW$IPv6Address\fR\->loadDebug($debug);
.PP
Debug.pm is a copy of valid Debug.pm object
.PP
\&\fIdecompressAddress()\fR
Processes the address supplied when constructing a Net::IPv6Address object.  Returns a \s-1STRING\s0 representing the fully decompressed
and unabbeviated address in an unformatted state, ie no colons just hexidecimal characters.
.PP
my \f(CW$unformattedAddress\fR = \f(CW$IPv6Address\fR\->\fIdecompressAddress()\fR;
.PP
address(\s-1STRING\s0)
Accepts a \s-1STRING\s0 representing the IPv6 address that the rest of the module operating on; the address is automatically decompressed.
With no arguments this function will return the address that was last set.
.PP
my \f(CW$address\fR = \f(CW$IPv6Address\fR\->\fIaddress()\fR;
.PP
$IPv6Address\->address(\*(L"2001:db8:1234::1\*(R");
.PP
addressLength(\s-1INTEGER\s0)
Accepts a \s-1INTEGER\s0 representing the IPv6 prefix length for the supplied address.
With no arguments this function will return the prefix length that was last set.
.PP
my \f(CW$length\fR = \f(CW$IPv6Address\fR\->\fIaddressLength()\fR;
.PP
$IPv6Address\->addressLength(48);
.PP
\&\fIprefix()\fR
This function retrieves the prefix for the supplied address given the prefix length.
A string will be returned.
.PP
my \f(CW$IPv6Address\fR = new Net::IPv6Address(\*(L"2001:0db8:abcd::1\*(R", 64);
my \f(CW$prefix\fR = \f(CW$IPv6Address\fR\->\fIprefix()\fR;
.PP
\&\fIinterface()\fR
This function retrieves the interface identifier for the supplied address given the prefix length.
A string will be returned.
.PP
my \f(CW$IPv6Address\fR = new Net::IPv6Address(\*(L"2001:0db8:abcd::1\*(R", 64);
my \f(CW$interface\fR = \f(CW$IPv6Address\fR\->\fIinterface()\fR;
.PP
\&\fIformatAddress()\fR
Properly formats the IPv6 address, if the address is compressed or abbreviated it will be uncompressed and unabbreviated then formatted and returned.
A string is returned.
.PP
my \f(CW$IPv6Address\fR = new Net::IPv6Address(\*(L"2001:0db8:abcd::1\*(R", 64);
my \f(CW$formattedAddress\fR = \f(CW$IPv6Address\fR\->\fIformatAddress()\fR;
.PP
\&\fIhexToBin()\fR
Converts a hexidecimal representation of an IPv6 address to its binary form.
The binary representation is returned in string format.
.PP
my \f(CW$IPv6Address\fR = new Net::IPv6Address(\*(L"2001:0db8:abcd::1\*(R", 64);
my \f(CW$binaryAddress\fR = \f(CW$IPv6Address\fR\->\fIhexToBin()\fR;
.PP
\&\fIbinToHex()\fR
converts the binary representation of an IPv6 address to it hexidecimal form.
The uncompresse and unabbbreviated hexidecimal representation is returned as a string.
.PP
my \f(CW$IPv6Address\fR = new Net::IPv6Address(\*(L"2001:0db8:abcd::1\*(R", 64);
my \f(CW$hexAddress\fR = \f(CW$IPv6Address\fR\->\fIbinToHex()\fR;
.PP
\&\fItrim()\fR
Removes leading whitespace, tabs, spaces, carriage returns, and line feeds.  The trimmed data is returned.
.PP
my \f(CW$IPv6Address\fR = new Net::IPv6Address(\*(L"2001:0db8:abcd::1\*(R", 64);
my \f(CW$tString\fR = \f(CW$IPv6Address\fR\->trim(\*(L" 2001:0db8:: \*(R");
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
N/A
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1JJMB\s0, <jjmb@jjmb.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008 by \s-1JJMB\s0
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
